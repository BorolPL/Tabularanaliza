<#@ template debug="false" hostspecific="true" language="C#" #>
<#@output extension=".generated.cs"#>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.AnalysisServices.retail.amd64.15.7.0.2\lib\net45\Microsoft.AnalysisServices.Tabular.dll" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.AnalysisServices.Tabular" #>
<#@include file="Rules.ttinclude"#>
// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.TOMWrapper.Undo;
using TabularEditor.TOMWrapper.Utils;
using System.Drawing.Design;
using TOM = Microsoft.AnalysisServices.Tabular;
namespace TabularEditor.TOMWrapper
{
<#
   Rules.XmlDocFile = Host.ResolvePath(@"..\..\..\packages\Microsoft.AnalysisServices.retail.amd64.15.7.0.2\lib\net45\Microsoft.AnalysisServices.Tabular.xml");

   if(!File.Exists(Rules.XmlDocFile)) {
	   throw new Exception("Could not locate file: " + Rules.XmlDocFile);
   }
    
#>    internal static partial class Properties
    {
<# var TOMWrapperProperties = new[]{ "TranslatedNames", "TranslatedDescriptions", "TranslatedDisplayFolders", "InPerspective" };
   foreach(string pn in Rules.ObjectTypes.Keys
	   .SelectMany(t => t.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly))
	   .Select(p => p.Name).Distinct().Concat(TOMWrapperProperties).OrderBy(p => p)) { #>
	    public const string <#= pn.ToUpper() #> = "<#= pn #>";
<# } #>
    }

	internal static class ObjectMetadata
	{
		private static readonly Dictionary<Type, Type> TOMMap = new Dictionary<Type, Type>() {
<# foreach(var t in Rules.ObjectTypes.Keys) { #>
            { typeof(<#= t.Name #>) , typeof(TOM.<#= t.Name #>) },
<# } #>	    };

		public static Type ToTOM(Type wrapperType) {
			return TOMMap[wrapperType];
		}

		public static Type FromTOM(Type tomType) {
			return TOMMap.FirstOrDefault(kvp => kvp.Value == tomType).Key;
		}

		public static readonly Type[] Creatable = {
<# foreach(var t in Rules.ObjectTypes.Keys.Where(obj => Rules.IsCreatable(obj))) { #>
            typeof(<#= t.Name #>),
<# } #>	        typeof(CalculatedTable)
        };
	}
<#
   foreach(var t in Rules.EnumTypes) {
#>
	<#= Rules.GetTypeXmlDoc(t) #>
	public enum <#= t.Name #> {    
<# foreach(var value in Enum.GetValues(t)) { #>
        <#= Enum.GetName(t, value) #> = <#= (int)value #>,
<# } #>
	}
<# }
   foreach(var t in Rules.ObjectTypes.Keys) {
	   var props = t.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);
#>  
	<#= Rules.GetTypeXmlDoc(t) #>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public <#= t.IsAbstract ? "abstract " : (Rules.Sealed(t) ? "sealed " : "") #>partial class <#= t.Name #>: <#= Rules.ObjectTypes[t]
#><#= props.Any(p => p.Name == "DisplayFolder") ? "\n\t\t\t, IFolderObject" : ""
#><#= props.Any(p => p.Name == "IsHidden") ? "\n\t\t\t, IHideableObject" : ""
#><#= props.Any(p => p.Name == "ErrorMessage") ? "\n\t\t\t, IErrorMessageObject" : ""
#><#= props.Any(p => p.Name == "Table") ? "\n\t\t\t, ITabularTableObject" : ""
#><#= props.Any(p => p.Name == "Description") ? "\n\t\t\t, IDescriptionObject" : ""
#><#= props.Any(p => p.Name == "Expression" && t.Name != "NamedExpression") ? "\n\t\t\t, IExpressionObject" : ""
#><#= props.Any(p => p.Name == "FormatString") ? "\n\t\t\t, IFormattableObject" : ""
#><#= props.Any(p => p.Name == "Annotations") ? "\n\t\t\t, IAnnotationObject" : ""
#><#= Rules.IsPerspectiveObject(t) ? "\n\t\t\t, ITabularPerspectiveObject" : ""
#><#= Rules.IsTranslatable(t) ? "\n\t\t\t, ITranslatableObject" : ""
#><#= Rules.IsCreatable(t) ? "\n\t\t\t, IClonableObject" : ""
#>
	{
	    internal new TOM.<#= t.Name #> MetadataObject 
		{ 
			get 
			{ 
				return base.MetadataObject as TOM.<#= t.Name #>; 
		    } 
			set 
			{ 
				base.MetadataObject = value; 
			}
		}

<#
	foreach(PropertyInfo p in props) 
	{   
		if (p.Name == "Annotations") { #>
        [Browsable(true),NoMultiselect,Category("Translations and Perspectives"),Description("The collection of Annotations on this object."),Editor(typeof(AnnotationCollectionEditor), typeof(UITypeEditor))]
		public AnnotationCollection Annotations { get; private set; }
		public string GetAnnotation(int index) {
			return MetadataObject.Annotations[index].Value;
		}
		public string GetAnnotation(string name) {
		    return MetadataObject.Annotations.ContainsName(name) ? MetadataObject.Annotations[name].Value : null;
		}
		public void SetAnnotation(int index, string value, bool undoable = true) {
			var name = MetadataObject.Annotations[index].Name;
			SetAnnotation(name, value, undoable);
		}
		public string GetNewAnnotationName() {
			return MetadataObject.Annotations.GetNewName("New Annotation");
		}
		public void SetAnnotation(string name, string value, bool undoable = true) {
			if(name == null) name = GetNewAnnotationName();

			if(value == null) {
				// Remove annotation if set to null:
				RemoveAnnotation(name, undoable);
				return;
			}

			if(GetAnnotation(name) == value) return;
			bool undoable2 = true;
			bool cancel = false;
			OnPropertyChanging(Properties.ANNOTATIONS, name + ":" + value, ref undoable2, ref cancel);
			if (cancel) return;

			if(MetadataObject.Annotations.Contains(name)) {
				// Change existing annotation:
				var oldValue = GetAnnotation(name);
				MetadataObject.Annotations[name].Value = value;
				if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, value, oldValue));
				OnPropertyChanged(Properties.ANNOTATIONS, name + ":" + oldValue, name + ":" + value);
			} else {
				// Add new annotation:
				MetadataObject.Annotations.Add(new TOM.Annotation{ Name = name, Value = value });
				if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, value, null));
				OnPropertyChanged(Properties.ANNOTATIONS, null, name + ":" + value);
			}

		}
		public void RemoveAnnotation(string name, bool undoable = true) {
			if(MetadataObject.Annotations.Contains(name)) {
				// Get current value:
				bool undoable2 = true;
				bool cancel = false;
				OnPropertyChanging(Properties.ANNOTATIONS, name + ":" + GetAnnotation(name), ref undoable2, ref cancel);
				if (cancel) return;

				var oldValue = MetadataObject.Annotations[name].Value;
				MetadataObject.Annotations.Remove(name);

				// Undo-handling:
				if (undoable) Handler.UndoManager.Add(new UndoAnnotationAction(this, name, null, oldValue));
				OnPropertyChanged(Properties.ANNOTATIONS, name + ":" + oldValue, null);
			}
		}
		public int GetAnnotationsCount() {
			return MetadataObject.Annotations.Count;
		}
		public IEnumerable<string> GetAnnotations() {
			return MetadataObject.Annotations.Select(a => a.Name);
		}

		<# }

		if (Rules.ShouldWrapProperty(p, t)) { #>
<#= Rules.GetPropertyXmlDoc(t, p.Name) #>
		[DisplayName("<#= Rules.GetDisplayName(p.Name, t.Name) #>")]
		[Category("<#= Rules.GetCategory(p.Name, t.Name) #>"),Description(@"<#= Rules.GetPropertyDescription(t, p.Name)#>"),IntelliSense(@"<#= Rules.GetPropertyDescription(t, p.Name)#>")]<#= Rules.GetOtherAttributes(p.Name, t.Name) #>
		public <#= Rules.PropertyType(p) #> <#= p.Name #> {
			<#= Rules.PropertyGetter(p) #>
			<#= Rules.PropertySetter(p) #>
		}
		private bool ShouldSerialize<#= p.Name #>() { return false; }
<#		}
		if (p.Name == "DisplayFolder") { #>
        /// <summary>
        /// Collection of localized Display Folders for this <#= t.Name #>.
        /// </summary>
        [Browsable(true),DisplayName("Translated Display Folders"),Description("Shows all translated Display Folders of this object."),Category("Translations and Perspectives")]
	    public TranslationIndexer TranslatedDisplayFolders { private set; get; }
<#		}
		if (p.Name == "Table") { #>
		[Browsable(false)]
		public Table Table
		{ 
			get 
			{ 
				TabularObject t = null;
				if(MetadataObject == null || MetadataObject.Table == null) return null;
				if(!Handler.WrapperLookup.TryGetValue(MetadataObject.Table, out t)) {
				    t = Model.Tables[MetadataObject.Table.Name];
				}
				return t as Table;
			} 
		}
<#      }
	}#>

<# if (Rules.IsPerspectiveObject(t)) { #>
        /// <Summary>
		/// Collection of perspectives in which this <#= t.Name #> is visible.
		/// </Summary>
		[Browsable(true),DisplayName("Shown in Perspective"), Description("Provides an easy way to include or exclude this object from the perspectives of the model."), Category("Translations and Perspectives")]
        public Perspective<#= t.Name #>Indexer InPerspective { get; private set; }
		PerspectiveIndexer ITabularPerspectiveObject.InPerspective { get { return this.InPerspective; } }
<# } if (Rules.IsTranslatable(t)) { #>
        /// <summary>
        /// Collection of localized descriptions for this <#= t.Name #>.
        /// </summary>
        [Browsable(true),DisplayName("Translated Descriptions"),Description("Shows all translated descriptions of this object."),Category("Translations and Perspectives")]
	    public TranslationIndexer TranslatedDescriptions { private set; get; }
        /// <summary>
        /// Collection of localized names for this <#= t.Name #>.
        /// </summary>
        [Browsable(true),DisplayName("Translated Names"),Description("Shows all translated names of this object."),Category("Translations and Perspectives")]
	    public TranslationIndexer TranslatedNames { private set; get; }

<# } if (!t.IsAbstract && Rules.InCollection(t)) { #>
		internal static <#= t.Name #> CreateFromMetadata(<#= Rules.GetParent(t) #> parent, TOM.<#= t.Name #> metadataObject) {
			var obj = new <#= t.Name #>(metadataObject);
			parent.<#= Rules.GetCollection(t) #>.Add(obj);
			
			obj.Init();

			return obj;
		}

<# if (Rules.IsCreatable(t)) { #>

		/// <summary>
		/// Creates a new <#= t.Name #> and adds it to the parent <#= Rules.GetParent(t) #>.
		/// Also creates the underlying metadataobject and adds it to the TOM tree.
		/// </summary>
		public static <#= t.Name #> CreateNew(<#= Rules.GetParent(t) #> parent, string name = null)
		{
			if(TabularModelHandler.Singleton.UsePowerBIGovernance && !PowerBI.PowerBIGovernance.AllowCreate(typeof(<#= t.Name #>))) {
				throw new InvalidOperationException(string.Format(Messages.CannotCreatePowerBIObject,typeof(<#= t.Name #>).GetTypeName()));
			}

			var metadataObject = new TOM.<#= t.Name #>();
			metadataObject.Name = parent.<#= Rules.GetCollection(t) #>.GetNewName(string.IsNullOrWhiteSpace(name) ? "New " + typeof(<#= t.Name #>).GetTypeName() : name);

			var obj = new <#= t.Name #>(metadataObject);

			parent.<#= Rules.GetCollection(t) #>.Add(obj);
			
			obj.Init();

			return obj;
		}

<# // Create parameterless constructors for objects at Model scope (perspectives, roles, etc.)
if(Rules.GetParent(t) == "Model") { #>
		/// <summary>
		/// Creates a new <#= t.Name #> and adds it to the current Model.
		/// Also creates the underlying metadataobject and adds it to the TOM tree.
		/// </summary>		
		public static <#= t.Name #> CreateNew(string name = null)
		{
			return CreateNew(TabularModelHandler.Singleton.Model, name);
		}

<# } #>

		/// <summary>
		/// Creates an exact copy of this <#= t.Name #> object.
		/// </summary>
		public <#= t.Name #> Clone(string newName = null<#= 
Rules.IsTranslatable(t, true) ? ", bool includeTranslations = true" : "" #><#=
Rules.GetParent(t) != "Model" ? ", " + Rules.GetParent(t) + " newParent = null" : "" #>) {
			if(TabularModelHandler.Singleton.UsePowerBIGovernance && !PowerBI.PowerBIGovernance.AllowCreate(typeof(<#= t.Name #>))) {
				throw new InvalidOperationException(string.Format(Messages.CannotCreatePowerBIObject,typeof(<#= t.Name #>).GetTypeName()));
			}

		    Handler.BeginUpdate("Clone <#= t.Name #>");

			// Create a clone of the underlying metadataobject:
			var tom = MetadataObject.Clone() as TOM.<#= t.Name #>;

<# if(t.Name == "Table") { #>
			// Make sure that measures on the table are renamed:
			foreach(var m in tom.Measures) m.Name = tom.Measures.GetNewName(m.Name);
<# } #>

			// Assign a new, unique name:
			tom.Name = Parent.<#= Rules.GetCollection(t) #>.GetNewName(string.IsNullOrEmpty(newName) ? tom.Name + " copy" : newName);
				
			// Create the TOM Wrapper object, representing the metadataobject
			<#= t.Name #> obj <# if(t.Name == "Table") { #>;
			if(this is CalculatedTable) obj = CalculatedTable.CreateFromMetadata(Parent, tom);
			else obj <# } #>= CreateFromMetadata(<#= Rules.GetParent(t) != "Model" ? "newParent ?? " : "" #>Parent, tom);

<# if (Rules.IsTranslatable(t, true)) { #>
			// Copy translations, if applicable:
			if(includeTranslations) {
				obj.CopyTranslationsFrom(this);
<# foreach(var c in Rules.GetChildCollections(t).Where(c => Rules.IsTranslatable(c.Key))) { #>
				foreach(var objChild in obj.<#= Rules.CollectionName(c.Key) #>) objChild.CopyTranslationsFrom(obj.<#= Rules.CollectionName(c.Key) #>[objChild.MetadataIndex]);
<# } #>
			}
<# } if (Rules.IsPerspectiveObject(t, true)) { #>
				
			// Copy perspectives:
			obj.InPerspective.CopyFrom(InPerspective);

<# } if (Rules.CloneRequiresDependencyTreeRebuild(t)) { #>
			// TODO: Make sure that dependency trees are properly rebuilt when IDaxDependantObjects are cloned
			// FormulaFixup.BuildDependencyTree(this);
<# } #>
            Handler.EndUpdate();

            return obj;
		}

		TabularNamedObject IClonableObject.Clone(string newName, bool includeTranslations, TabularNamedObject newParent) 
		{
<#  if (Rules.GetParent(t) == "Model") { #>
			if (newParent != null) throw new ArgumentException("This object can not be cloned to another parent. Argument newParent should be left as null.", "newParent");
<# } #>
			return Clone(newName<#= Rules.IsTranslatable(t) ? ", includeTranslations" : "" #>);
		}

<# } } #>
	
        internal override void RenewMetadataObject()
        {
            Handler.WrapperLookup.Remove(MetadataObject);
            MetadataObject = MetadataObject.Clone() as TOM.<#= t.Name #>;
            Handler.WrapperLookup.Add(MetadataObject, this);
        }

<# if (Rules.InCollection(t)) { #>
		public <#= Rules.ObjectTypes[t] != "TabularNamedObject" && Rules.InCollection(t.BaseType) ? "new " : ""#><#= Rules.GetParent(t) #> Parent { 
			get {
				return Handler.WrapperLookup[MetadataObject.Parent] as <#= Rules.GetParent(t) #>;
			}
		}
<# } #>

<# if(Rules.HasCollections(t)) { #>
        internal override ITabularObjectCollection GetCollectionForChild(TabularObject child)
        {
<# foreach(var c in Rules.GetChildCollections(t)) { #>
			if (child is <#= c.Key.Name #>) return <#= Rules.CollectionName(c.Key) #>;
<# } #>
            return base.GetCollectionForChild(child);
        }
<# } #>

<# foreach(var c in Rules.GetChildCollections(t)) {
		var colName = Rules.CollectionName(c.Key);	
 #>
        /// <summary>
        /// The collection of <#= c.Key.Name #> objects on this <#= t.Name #>.
        /// </summary>
		[DisplayName("<#= Rules.GetDisplayName(colName, t.Name) #>")]
		[Category("<#= Rules.GetCategory(colName, t.Name) #>"),IntelliSense("The collection of <#= Rules.GetDisplayName(c.Key.Name, t.Name) #> objects on this <#= t.Name #>.")]<#= Rules.GetOtherAttributes(colName, t.Name) #>
		public <#= c.Key.Name #>Collection <#= colName #> { get; <#= Rules.Sealed(t) ? "private" : "protected" #> set; }
<# } #>

		/// <summary>
		/// CTOR - only called from static factory methods on the class
		/// </summary>
		<#= Rules.Sealed(t) ? "" : "protected "#><#= t.Name #>(TOM.<#= t.Name #> metadataObject) : base(metadataObject)
		{
<# if(Rules.IsTranslatable(t)) { #>
			// Create indexers for translations:
			TranslatedNames = new TranslationIndexer(this, TOM.TranslatedProperty.Caption);
			TranslatedDescriptions = new TranslationIndexer(this, TOM.TranslatedProperty.Description);
<# } if(props.Any(p => p.Name == "DisplayFolder")) { #>
			TranslatedDisplayFolders = new TranslationIndexer(this, TOM.TranslatedProperty.DisplayFolder);
<# } if(Rules.IsPerspectiveObject(t)) { #>

			// Create indexer for perspectives:
			InPerspective = new Perspective<#= t.Name #>Indexer(this);
<# } if(props.Any(p => p.Name == "Annotations")) { #>
			
			// Create indexer for annotations:
			Annotations = new AnnotationCollection(this);
<# }#>
<# if(Rules.HasCollections(t)) { #>
			
			// Instantiate child collections:
<#		foreach(var c in Rules.GetChildCollections(t)) { var colName = Rules.CollectionName(c.Key); #>
			<#= colName #> = new <#= c.Key.Name #>Collection(this.GetObjectPath() + ".<#= colName #>", MetadataObject.<#= colName #>, this);
<#		} #>

			// Populate child collections:
<#		foreach(var c in Rules.GetChildCollections(t)) { var colName = Rules.CollectionName(c.Key); #>
			<#= colName #>.CreateChildrenFromMetadata();
<#		} #>

			// Hook up event handlers on child collections:
<#		foreach(var c in Rules.GetChildCollections(t)) { var colName = Rules.CollectionName(c.Key); #>
			<#= colName #>.CollectionChanged += Children_CollectionChanged;
<#		} #>
<# } #>
		}


<# if(Rules.HasCollections(t)) { #>
		internal override void Reinit() {
<#		foreach(var c in Rules.GetChildCollections(t)) { var colName = Rules.CollectionName(c.Key); #>
			<#= colName #>.Reinit();
<#		} #>
		}
<# } #>

		internal override void Undelete(ITabularObjectCollection collection) {
			base.Undelete(collection);
			Reinit();
			ReapplyReferences();
		}

		public override bool Browsable(string propertyName) {
			switch (propertyName) {
<# if(Rules.InCollection(t)) { #>
				case Properties.PARENT:
					return false;
<# } if(Rules.IsTranslatable(t)) { #>
				
				// Hides translation properties in the grid, unless the model actually contains translations:
				case Properties.TRANSLATEDNAMES:
				case Properties.TRANSLATEDDESCRIPTIONS:
<#     if(Rules.HasDisplayFolder(t)) { #>
				case Properties.TRANSLATEDDISPLAYFOLDERS:
<#     } #>
					return Model.Cultures.Any();
<# } if(Rules.IsPerspectiveObject(t)) { #>
				
				// Hides the perspective property in the grid, unless the model actually contains perspectives:
				case Properties.INPERSPECTIVE:
					return Model.Perspectives.Any();
<# } #>				
				default:
					return base.Browsable(propertyName);
			}
		}

    }

<#  if (Rules.NeedsCollection(t)) { #>

	/// <summary>
	/// Collection class for <#= t.Name #>. Provides convenient properties for setting a property on multiple objects at once.
	/// </summary>
	public sealed partial class <#= t.Name #>Collection: TabularObjectCollection<<#= t.Name == "Relationship" ? "SingleColumnRelationship" : t.Name #>>
	{
		internal <#= Rules.GetParent(t) #> <#= Rules.GetParent(t) #> { get { return Parent as <#= Rules.GetParent(t) #>; } }
		TOM.<#= t.Name #>Collection TOM_Collection;
		internal <#= t.Name #>Collection(string collectionName, TOM.<#= t.Name #>Collection metadataObjectCollection, <#= Rules.GetParent(t) #> parent) : base(collectionName, parent)
		{
			TOM_Collection = metadataObjectCollection;
		}
		internal override Type GetItemType() { return typeof(<#= t.Name #>); }
        protected override void TOM_Add(TOM.MetadataObject obj) { TOM_Collection.Add(obj as TOM.<#= t.Name #>); }
        protected override bool TOM_Contains(TOM.MetadataObject obj) { return TOM_Collection.Contains(obj as TOM.<#= t.Name #>); }
        protected override void TOM_Remove(TOM.MetadataObject obj) { TOM_Collection.Remove(obj as TOM.<#= t.Name #>); }
        protected override void TOM_Clear() { TOM_Collection.Clear(); }
        protected override bool TOM_ContainsName(string name) { return TOM_Collection.ContainsName(name); }
        protected override TOM.MetadataObject TOM_Get(int index) { return TOM_Collection[index]; }
        protected override TOM.MetadataObject TOM_Get(string name) { return TOM_Collection[name]; }
<# if (t.Name != "Measure" && t.Name != "Relationship" && t.Name != "Column") { #>
        internal override string GetNewName(string prefix = null) { return string.IsNullOrEmpty(prefix) ? TOM_Collection.GetNewName() : TOM_Collection.GetNewName(prefix); }
<# } if (t.Name == "Relationship") { #> 
		internal override string GetNewName(string prefix = null) { return Guid.NewGuid().ToString(); }
<# } if (t.Name != "Column") { #>
        public override int IndexOf(TOM.MetadataObject obj) { return TOM_Collection.IndexOf(obj as TOM.<#= t.Name #>); }
        public override int Count { get { return TOM_Collection.Count; } }
        public override IEnumerator<<#= t.Name == "Relationship" ? "SingleColumnRelationship" : t.Name #>> GetEnumerator() { return TOM_Collection.Select(h => Handler.WrapperLookup[h]).OfType<<#= t.Name == "Relationship" ? "SingleColumnRelationship" : t.Name #>>().GetEnumerator(); }
<# } #>
		internal override void Reinit() {
			var ixOffset = 0;
			for(int i = 0; i < Count; i++) {
				var item = this[i];
				Handler.WrapperLookup.Remove(item.MetadataObject);
<# if (t.Name == "Column") { #>
				if(Table.MetadataObject.Columns[i] is TOM.RowNumberColumn) ixOffset++;
<# } #>
				item.MetadataObject = <#= Rules.GetParent(t) #>.MetadataObject.<#= Rules.CollectionName(t) #>[i + ixOffset] as TOM.<#= t.Name == "Relationship" ? "SingleColumnRelationship" : t.Name #>;
				Handler.WrapperLookup.Add(item.MetadataObject, item);
				item.Collection = this;
			}
			TOM_Collection = <#= Rules.GetParent(t) #>.MetadataObject.<#= Rules.CollectionName(t) #>;
			foreach(var item in this) item.Reinit();
		}

		internal override void ReapplyReferences() {
			foreach(var item in this) item.ReapplyReferences();
		}

		/// <summary>
		/// Calling this method will populate the <#= t.Name #>Collection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
		/// </summary>
		internal override void CreateChildrenFromMetadata()
		{
			// Construct child objects (they are automatically added to the Handler's WrapperLookup dictionary):
			foreach(var obj in TOM_Collection) {
<# if (t.Name == "Table") { #>
                if (obj.Partitions[0].SourceType == TOM.PartitionSourceType.Calculated) CalculatedTable.CreateFromMetadata(Model, obj);
                else Table.CreateFromMetadata(Model, obj);
<# } else if (t.Name == "Partition") { #>
				if(obj.SourceType == TOM.PartitionSourceType.M) MPartition.CreateFromMetadata(<#= Rules.GetParent(t) #>, obj);
				else Partition.CreateFromMetadata(<#= Rules.GetParent(t) #>, obj);
<# } else
{
   foreach(var derived in Rules.GetDerivedTypes(t)) { #>
				if(obj is TOM.<#= derived.Name #>) <#= derived.Name #>.CreateFromMetadata(<#= Rules.GetParent(t) #>, obj as TOM.<#= derived.Name #>);
<# }
} #>		    }
		}

<#      foreach(PropertyInfo p in props) 
		{   
			if (Rules.ShouldWrapCollectionProperty(p, t)) { #>
		/// <summary>
		/// Sets the <#= p.Name #> property of all objects in the collection at once.
		/// </summary>
		[Description("Sets the <#= p.Name #> property of all objects in the collection at once.")]
		public <#= Rules.PropertyType(p) #> <#= p.Name #> {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("<#= p.Name #>"));
				this.ToList().ForEach(item => { item.<#= p.Name #> = value; });
				Handler.UndoManager.EndBatch();
			}
		}
<#          }
        } #>

		public override string ToString() {
			return string.Format("({0} {1})", Count, (Count == 1 ? "<#= t.Name #>" : "<#= t == typeof(Column) ? "Columns" : Rules.Collections[t]#>").ToLower());
		}
	}
<#  } #>
<#
    }
#>
}